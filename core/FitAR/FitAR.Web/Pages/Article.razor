@page "/article/{articleId}"


<div class="main-body">
	<div class="page-wrapper">
		<!-- Page-header start -->
		<div class="page-header">
			<div class="row align-items-end">
				<div class="col-lg-8">
					<div class="page-header-title">
						<div class="d-inline">
							<h4>@this.ArticleModel.title</h4>
							<span>
								Креирано: <strong>@this.ArticleModel.created.PrintDate()</strong> <br />
								Mодификовано: <strong>@this.ArticleModel.updated.PrintDate()</strong>
							</span>
						</div>
					</div>
				</div>
			</div>
		</div>


		@if (!HasError)
		{
			<div class="page-body">
				<div class="row">
					<div class="col-sm-12">
						<div class="card">
							<div class="card-block card-block-text">
								@((MarkupString)this.ArticleModel.html)
							</div>
						</div>

						@if (Context.IsAdmin)
						{

							<div class="card">
								<div class="card-block">
									<div class="form-group row">
										<div class="col-sm-12">
											<input type="text" placeholder="Naslov" class="form-control" @bind="this.ArticleModel.title">
										</div>
										<div class="col-sm-12">
											<input type="text" placeholder="Индекс" class="form-control" @bind="this.ArticleModel.defaultIndex">
										</div>
									</div>
									<div id="content" class="ck">
										@((MarkupString)this.ArticleModel.html)
									</div>
								</div>
								<div class="card-block">
									<button class="btn btn-primary" @onclick="OnSave">Sacuvaj</button>
									<button class="btn btn-danger btn-outline-danger" @onclick="OpenConfirmDelete"><i class="icofont icofont-eye-alt"></i>Izbrisi</button>
								</div>
							</div>

						}


						@if (this.ConfirmDelete)
						{
							<div class="modal-dialog" role="document">
								<div class="modal-content">
									<div class="modal-header">
										<h5 class="modal-title">Siguran da izbrises</h5>
										<button type="button" class="close" data-dismiss="modal" aria-label="Close">
											<span aria-hidden="true">×</span>
										</button>
									</div>
									<div class="modal-body">
										<p></p>
									</div>
									<div class="modal-footer">
										<button type="button" class="btn btn-secondary mobtn" @onclick="@CloseConfirmDelete" data-dismiss="modal">Ne</button>
										<button type="button" class="btn btn-primary mobtn" @onclick="DeleteThisArticle">Da</button>
									</div>
								</div>
							</div>
						}

					</div>
				</div>
			</div>
		}
		else
		{
			<strong>Greska!</strong>
		}

	</div>
</div>

@code{
	@inherits ARPage
	@inject IJSRuntime JSRuntime
	@inject ARContext Context;
	@inject NavigationManager NavigationManager

	[Parameter] public string articleId { get; set; }
	public bool HasError = false;
	public bool ConfirmDelete = false;
	public ArticleDM ArticleModel { get; set; } = null;

	protected override void OnParametersSet()
	{
		int articleID;
		if (!int.TryParse(this.articleId, out articleID))
		{
			this.HasError = true;
			return;
		}

		this.ArticleModel = ARDirect.Instance.Query<ArticleDM>().Where("[id]={0}", articleID).LoadSingle();
		if (this.ArticleModel == null)
		{
			this.HasError = true;
			return;
		}
	}

	protected override Task OnInitializedAsync()
	{
		return base.OnInitializedAsync();
	}

	protected async void OnSave()
	{
		this.ArticleModel.html = await JSRuntime.InvokeAsync<string>("CKCustomEditor.getData");
		await this.ArticleModel.UpdateAsync();

		//// update title
		//var fallbackArticle = (from a in CachingManager.IRCArticles where a.ID == this.ArticleModel.fallbackid.Value select a).FirstOrDefault();
		//for (var i = 0; i < fallbackArticle.Columns.Count; i++)
		//	if (fallbackArticle.Columns[i].ID == this.ArticleModel.ID.Value)
		//	{
		//		fallbackArticle.Columns[i].Title = this.ArticleModel.title;
		//		break;
		//	}

		CachingManager.IRCArticles = await CachingArticlesManager.Load(1);
		this.StateHasChanged();
	}

	/// <summary>
	///  DELETE
	/// </summary>

	protected void OpenConfirmDelete()
	{
		this.ConfirmDelete = true;
		this.StateHasChanged();
	}

	protected void CloseConfirmDelete()
	{
		this.ConfirmDelete = false;
		this.StateHasChanged();
	}

	protected void DeleteThisArticle()
	{
		// izbrisi iz cache
		var fallbackArticle = (from a in CachingManager.IRCArticles where a.ID == this.ArticleModel.fallbackid.Value select a).FirstOrDefault();
		for (var i = 0; i < fallbackArticle.Columns.Count; i++)
			if (fallbackArticle.Columns[i].ID == this.ArticleModel.ID.Value)
			{
				fallbackArticle.Columns.RemoveAt(i);
				break;
			}

		this.ArticleModel.Delete();
		this.StateHasChanged();
		NavigationManager.NavigateTo("/");
	}


}