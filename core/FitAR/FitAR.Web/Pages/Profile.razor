@page "/profile/{username}"


<div class="main-body">
	<div class="page-wrapper">
		<!-- Page-header start -->

		@if (this.Client == null)
		{
			<div class="page-header">
				<div class="row align-items-end">
					<div class="col-lg-8">
						<div class="page-header-title">
							<div class="d-inline">
								<h4>Грешка</h4>
								<span>Не постоји профил са овим корисничким именом</span>
							</div>
						</div>
					</div>
				</div>
			</div>
		}

		@if (this.Client != null)
		{
			<div class="page-body">
				<!--profile cover start-->
				<div class="row">
					<div class="col-lg-12">
						<div class="cover-profile">
							<div class="profile-bg-img">
								<img class="profile-bg-img img-fluid" src="assets\images\user-profile\bg-img1.jpg" alt="bg-img">
								<div class="card-block user-info">
									<div class="col-md-12">
										<div class="media-left">
											<a href="#" class="profile-image">
												<img class="user-img img-radius" src="@this.Client.profilePic" alt="user-img" style="width:100px">
											</a>
										</div>
										<div class="media-body row">
											<div class="col-lg-12">
												<div class="user-title">
													<h2>@this.Client.username</h2>
													<span class="text-white">@this.Client.firstName @this.Client.lastName</span>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
				<!--profile cover end-->
				<div class="row">
					<div class="col-lg-12">
						<!-- tab header end -->
						<!-- tab content start -->
						<div class="tab-content">
							<!-- tab panel personal start -->
							<div class="tab-pane active" id="personal" role="tabpanel">
								<!-- personal card start -->
								<div class="card">
									<div class="card-header">
										<h5 class="card-header-text">Подаци о кориснику</h5>
									</div>
									<div class="card-block">
										<div class="view-info">
											<div class="row">
												<div class="col-lg-12">
													<div class="general-info">
														<div class="row">
															<div class="col-lg-12 col-xl-6">
																<div class="table-responsive">
																	<table class="table m-0">
																		<tbody>
																			<tr>
																				<th scope="row">Име и презиме</th>
																				<td>@Client.firstName @Client.lastName</td>
																			</tr>
																			<tr>
																				<th scope="row">Профил креиран</th>
																				<td>@Client.created.PrintDate()</td>
																			</tr>
																		</tbody>
																	</table>
																</div>
															</div>
															<!-- end of table col-lg-6 -->
														</div>
														<!-- end of row -->
													</div>
													<!-- end of general info -->
												</div>
												<!-- end of col-lg-12 -->
											</div>
											<!-- end of row -->
										</div>
										<!-- end of edit-info -->
									</div>

									<!-- end of card-block -->
								</div>


								@if (!string.IsNullOrEmpty(this.Client.additional))
								{
									<div class="card">
										<div class="card-block card-block-text">
											@((MarkupString)this.Client.additional)
										</div>
									</div>
								}

								@if (AndroidSocketManager.Current?.IsOnline(this.Client.username) == true)
								{

									<div class="card">
										<div class="card-block card-block-text">
											<strong>Корисник је тренутно онлине, пошаљите му поруку</strong> <br />
											<input type="text" @bind="socketMessage"/>
											<button @onclick="SendSocketMessage">Пошаљи</button>
										</div>
									</div>
								}

								<div class="row">
									<div class="col-lg-12">
										<div class="card">
											<div class="card-header">
												<h5 class="card-header-text">Логин подаци</h5>
											</div>
											<div class="card-block user-desc">

												<div class="card-block">
													<div class="dt-responsive table-responsive">
														<table class="table table-striped table-bordered nowrap" serialize>
															<thead>
																<tr>
																	<th>Латитуда</th>
																	<th>Лонгтитуда</th>
																	<th>Трајање сесије</th>
																	<th>Вријеме</th>
																</tr>
															</thead>
															<tbody>
																@foreach (var session in this.Sessions)
																{
																	<tr>
																		<th>@session.lat</th>
																		<th>@session.lng</th>
																		<th>@session.duration секунди</th>
																		<th>@session.created.PrintDate()</th>
																	</tr>
																}
															</tbody>
															<tfoot>
																<tr>
																	<th>Латитуда</th>
																	<th>Лонгтитуда</th>
																	<th>Трајање сесије</th>
																	<th>Вријеме</th>
																</tr>
															</tfoot>
														</table>
													</div>
												</div>

											</div>
										</div>
									</div>
								</div>

							</div>
						</div>

					</div>
				</div>
			</div>

		}
	</div>
</div>


@if (this.Client != null && Context.IsAdmin)
{

	<div class="card">
		<div class="card-block">
			<div class="form-group row">
			</div>
			<div id="content" class="ck">
				@((MarkupString)this.Client.additional)
			</div>
		</div>
		<div class="card-block">
			<button class="btn btn-primary" @onclick="OnSave">Sacuvaj</button>
		</div>
	</div>

}

<!-- Main body end -->
<div id="styleSelector">

</div>

@code {
	@inherits ARPage
	@inject IJSRuntime JSRuntime
	@inject ARContext Context;

	[Parameter] public string username { get; set; }
	ClientDM Client = null;
	List<ClientSessionDM> Sessions = new List<ClientSessionDM>();
	List<AnchorDM> Anchors = new List<AnchorDM>();
	string socketMessage = "";


	protected override async Task OnParametersSetAsync()
	{
		base.OnParametersSetAsync();
		this.Client = await ARDirect.Instance.Query<ClientDM>().Where("username={0}", this.username).LoadSingleAsync();
		if (this.Client == null)
		{
			this.StateHasChanged();
			return;
		}

		this.Sessions = await ARDirect.Instance.Query<ClientSessionDM>().Where("clientid={0}", this.Client.ID.ToString()).Additional("order by created desc").Limit(50).LoadAsync();
		this.Anchors = await ARDirect.Instance.Query<AnchorDM>().Where("clientid={0}", this.Client.ID).Additional("order by created desc").LoadAsync();

	}


	protected async void OnSave()
	{
		this.Client.additional = await JSRuntime.InvokeAsync<string>("CKCustomEditor.getData");
		await this.Client.UpdateAsync();

		//// update title
		//var fallbackArticle = (from a in CachingManager.IRCArticles where a.ID == this.ArticleModel.fallbackid.Value select a).FirstOrDefault();
		//for (var i = 0; i < fallbackArticle.Columns.Count; i++)
		//	if (fallbackArticle.Columns[i].ID == this.ArticleModel.ID.Value)
		//	{
		//		fallbackArticle.Columns[i].Title = this.ArticleModel.title;
		//		break;
		//	}

		this.StateHasChanged();
	}

	void SendSocketMessage()
	{
		// TODO: ova metoda salje poruku svima, mora se ispraviti da salje samo specificnom profilu
		AndroidSocketManager.Current.Send(FitAR.Sockets.Models.AndroidSocketMessage.Construct("text", "green", new FitAR.Sockets.Models.AndroidSocketTextMessage()
		{
			text = socketMessage
		}));

		socketMessage = "";
		this.StateHasChanged();
	}

}
